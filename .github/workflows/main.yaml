name: 'SWM'  

on: push

jobs: # 빌드서버를 제공. job 하나하나가 빌드서버 하나하나임. 디폴트는 순차실행이 아니라 병렬적 실행
  build-test:
    name: 'Build & Test'

    runs-on: 'ubuntu-latest'

    steps:
    - name: Send a message to Webex Space
      shell: bash
      run: |
        curl --location --request POST "https://webexapis.com/v1/messages" \
          --header "Authorization: Bearer ${{secrets.WEBEX_TOKEN}}" \
          --header "Content-type: application/json" \
          --data-raw '{
            "roomId": "${{secrets.WEBEX_ROOD_ID}}",
            "text": "메시지 from GITHUB ACTION"
          }'

    - name: Post Message to Webex Room
      uses: chrivand/action-webex-js@main
      env:
        WEBEX_TOKEN: ${{ secrets.WEBEX_TOKEN }}
        WEBEX_ROOM_ID: ${{ secrets.WEBEX_ROOD_ID }}
        MARKDOWN_MESSAGE: "**Hello, world! You just ran an action from ${{ github.repository }}.**"

  



# 잡은 병렬적 실행, 스텝은 순차적 실행. 스텝은 앞 스텝이 실패하면 다음 스텝도 실행 X
# echo "GLOBAL: $GLOBAL_LEVEL" : 배시쉘 문법
# echo "JOB 1: ${{env.JOB_LEVEL_1}}" : 깃허브 액션 문법(변수에 접근하는?)
# 매트릭스를 여러 개 줌으로써 서로 다른 환경에서의 워크플로우들을 모조리 싹 가능
# if: matrix.os == 'windows-latest' : os가 윈도우일때만 이 스텝을 돌린다! &&로 다른 조건도 연결 가능
# if: fail() : 앞단계 스텝이 실패했다면 실행해라. 즉 일반적인 if는 if: success()가 암묵적으로 있는 것임

# strategy: # 나는 운영체제를 이 3가지를 돌리고 싶다
#       matrix:
#         os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
#         nodejs: ['16',  '18']


# 잡들은 기본적으로 병렬 실행, but needs를 줌으로써 순서를 줄 수 있음
# needs:
#  - deploy-dev -> deploy-dev라는 잡이 끝나야 난 돌 수 있다.라는 뜻


# on: # ['push', 'pull_request'] 등으로도 작성 가능
#   push:
#     branches: # 특정 브랜치에 푸시가 일어났을 때만 한다
#       - main
#       - 'feature/*'
#     paths: # 특정 경로에 푸시가 일어났을 때만 한다
#       - 'src/*'
#       - 'test/*'
#   pull_request:
#     branches:
#       - main